}
data.frame(Generation = 1:n_gens, epi_mean_A = mean_epi_A, epi_mean_B = mean_epi_B, epi_FST = epi_FST, gen_FST = gen_FST)
}
test <- Simulate(h = 0.75, mig_AB = 0.10, mig_BA = 0.10,
selection = 0, env_A = 0.2, env_B = 0.8, env_sd = 0.02)
plot(test$Generation, test$gen_FST, type = "l")     # should now slope downward
Simulate <- function(h, mig_AB, mig_BA, selection, env_A, env_B, env_sd, start_E_A, start_E_B) {
h_epi = h
# Initialize population with SNP genotypes
geno_A = matrix(rbinom(n_per_pop * n_loci * 2, 1, env_A), ncol = 2 * n_loci)
geno_B = matrix(rbinom(n_per_pop * n_loci * 2, 1, env_B), ncol = 2 * n_loci)
pop = data.frame(ID = 1:(2 * n_per_pop), pop = rep(c("A", "B"), each = n_per_pop), epi = c(rnorm(n_per_pop, start_E_A, 0.01), rnorm(n_per_pop, start_E_B, 0.01)))
geno = rbind(geno_A, geno_B)
mean_epi_A = mean_epi_B = numeric(n_gens)
epi_FST    = gen_FST    = numeric(n_gens)
for (gen in 1:n_gens) {
# Epigenetic FST
mean_epi_A[gen] = mean(pop$epi[pop$pop == "A"])
mean_epi_B[gen] = mean(pop$epi[pop$pop == "B"])
epi_FST[gen]    = CalcFst(pop$epi, pop$pop)
# Genetic FST
#geno_summed = sapply(seq(1, ncol(geno), by = 2), function(i) {geno[, i] + geno[, i + 1]})
geno_summed = sapply(seq(1, ncol(geno), by = 2), function(i) {geno[, i] + geno[, i + 1] + 1}) #shift index for heirstat
geno_summed = as.data.frame(geno_summed)
wc_input  = data.frame(pop = ifelse(pop$pop == "A", 1, 2), geno_summed)
wc_result = wc(wc_input)
gen_FST[gen] = wc_result$FST
# Reproduction with selection or random mating
env_target = ifelse(pop$pop == "A", env_A, env_B)
if (selection != 0) {
mismatch       = 1 - abs(pop$epi - env_target)
parent_weights = exp(mismatch * selection)
p1_indices = sample(1:nrow(pop), nrow(pop), replace = TRUE, prob = parent_weights)
p2_indices = sample(1:nrow(pop), nrow(pop), replace = TRUE, prob = parent_weights)
} else {
p1_indices = sample(1:nrow(pop), nrow(pop), replace = TRUE)
p2_indices = sample(1:nrow(pop), nrow(pop), replace = TRUE)
}
# No selfing
while (any(p1_indices == p2_indices)) {
same = which(p1_indices == p2_indices)
p2_indices[same] = sample(1:nrow(pop), length(same), replace = TRUE)
}
# Epigenetic inheritance
epi_p1 = pop$epi[p1_indices]
epi_p2 = pop$epi[p2_indices]
current_pop = pop$pop[p1_indices]
env_vals    = ifelse(current_pop == "A",
rnorm(nrow(pop), env_A, env_sd),
rnorm(nrow(pop), env_B, env_sd))
epi_new = h_epi * ((epi_p1 + epi_p2) / 2) + (1 - h_epi) * env_vals + rnorm(nrow(pop), 0, noise_sd)
epi_new = pmin(pmax(epi_new, 0), 1)
# Genotype inheritance
geno_offspring = matrix(0, nrow = nrow(pop), ncol = ncol(geno))
for (l in seq(1, ncol(geno), by = 2)) {
alleles_p1 = ifelse(runif(nrow(pop)) < 0.5, geno[p1_indices, l], geno[p1_indices, l + 1])
alleles_p2 = ifelse(runif(nrow(pop)) < 0.5, geno[p2_indices, l], geno[p2_indices, l + 1])
geno_offspring[, l]     = alleles_p1
geno_offspring[, l + 1] = alleles_p2
}
# Reset all B-born individuals to match env_B
born_in_B = current_pop == "B"
epi_new[born_in_B] = rnorm(sum(born_in_B), env_B, env_sd)
# Migration AFTER reproduction
new_pop = current_pop
# Identify individuals in A and B
is_A <- current_pop == "A"
is_B <- current_pop == "B"
# For A → B migration
migrate_A <- runif(sum(is_A)) < mig_AB
new_pop[which(is_A)[migrate_A]] = "B"
# For B → A migration
migrate_B <- runif(sum(is_B)) < mig_BA
new_pop[which(is_B)[migrate_B]] = "A"
# Identify individuals who moved into B and "reset" such that B epi is always constant
migrated_to_B <- (new_pop == "B") & (current_pop != "B")
epi_new[migrated_to_B] = rnorm(sum(migrated_to_B), env_B, env_sd)
# Check overall population size, correct as needed
offspring_df = data.frame(epi = epi_new, pop = new_pop, stringsAsFactors = FALSE)
# Maintain fixed size: n_per_pop in A and B
pop_A_idx = which(offspring_df$pop == "A")
pop_B_idx = which(offspring_df$pop == "B")
# Sample to enforce fixed population sizes. -- should only need if migration is assymetrical
if (length(pop_A_idx) >= n_per_pop) {
keep_A = sample(pop_A_idx, n_per_pop, replace = FALSE)
} else {
# Not enough A individuals — sample with replacement to reach 100
keep_A = sample(pop_A_idx, n_per_pop, replace = TRUE)
}
if (length(pop_B_idx) >= n_per_pop) {
keep_B = sample(pop_B_idx, n_per_pop, replace = FALSE)
} else {
# Not enough B individuals — sample with replacement to reach 100
keep_B = sample(pop_B_idx, n_per_pop, replace = TRUE)
}
# Combine final population
final_indices = c(keep_A, keep_B)
geno = geno_offspring[final_indices, ]
pop  = data.frame(ID = 1:(2 * n_per_pop), pop = offspring_df$pop[final_indices], epi = offspring_df$epi[final_indices] )
}
data.frame(Generation = 1:n_gens, epi_mean_A = mean_epi_A, epi_mean_B = mean_epi_B, epi_FST = epi_FST, gen_FST = gen_FST)
}
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#Parameters
set.seed(2112)
n_per_pop = 100                 # Match theory n_pop=100
n_gens    = 50                  # Match theory t_max=250
n_reps    = 100
h_vals    = c(0.5, 0.75, 0.9)   # Match theory compare_h_vals=c(0.5, 0.75, 0.9)
m_AB_vals = c(0.01, 0.1)        # Match theory compare_m_vals=c(0.01, 0.1)
m_BA_val  = 0                   # Allow option for migration to be asymmetric
env_A     = 0.5                 # Match theory 0.5
env_B     = 1                   # Match theory 1
env_sd    = 0.02                # Match theory environmental noise 0.02
start_E_A = 0.2                 # Match theory 0.2
start_E_B = 1                   # Match theory 1
noise_sd  = 0.01                # No epi noise beyond env_sd=0
n_loci    = 50
selection = 0                   # No selection=0
# Create progress log file
logfile <- "simulation_progress.txt"
write("Starting simulations...\n", file = logfile)
#Run replicates
results_list <- list()
for (h in h_vals) {
for (m in m_AB_vals) {
m_BA_val <- m                   # symmetric migration
reps <- replicate(n_reps, Simulate(h, m, m_BA_val, selection, env_A, env_B, env_sd, noise_sd, start_E_A, start_E_B), simplify = FALSE)
reps_df <- do.call(rbind, lapply(seq_along(reps), \(i) cbind(reps[[i]], rep = i)))
reps_df$h_epi <- h
reps_df$m_AB  <- m
reps_df$m_BA  <- m_BA_val
results_list[[paste(h, m, m_BA_val, sep = "_")]] <- reps_df
cat(sprintf("Finished h = %.2f, m_AB = %.2f, m_BA = %.2f at %s\n",  h, m, m_BA_val, format(Sys.time(), "%Y-%m-%d %H:%M:%S")), file = logfile, append = TRUE)
}
}
all_df <- do.call(rbind, results_list)
agg_df <- all_df %>%
group_by(Generation, h_epi, m_AB) %>%
summarise(
epi_A.mean  = mean(epi_mean_A, na.rm = TRUE),
epi_A.lwr   = quantile(epi_mean_A, .025, na.rm = TRUE),
epi_A.upr   = quantile(epi_mean_A, .975, na.rm = TRUE),
epi_B.mean  = mean(epi_mean_B, na.rm = TRUE),
epi_B.lwr   = quantile(epi_mean_B, .025, na.rm = TRUE),
epi_B.upr   = quantile(epi_mean_B, .975, na.rm = TRUE),
epi_FST.mean = mean(epi_FST, na.rm = TRUE),
epi_FST.lwr  = quantile(epi_FST, .025, na.rm = TRUE),
epi_FST.upr  = quantile(epi_FST, .975, na.rm = TRUE),
gen_FST.mean = mean(gen_FST, na.rm = TRUE),
gen_FST.lwr  = quantile(gen_FST, .025, na.rm = TRUE),
gen_FST.upr  = quantile(gen_FST, .975, na.rm = TRUE),
.groups = "drop"
)
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
saveRDS(list(all_df   = all_df,
agg_df   = agg_df,
n_per_pop = n_per_pop,
n_gens    = n_gens,
n_reps    = n_reps,
h_vals    = h_vals,
m_AB_vals = m_AB_vals,
m_BA_val  = m_BA_val,
env_A     = env_A,
env_B     = env_B,
env_sd    = env_sd,
noise_sd  = noise_sd,
n_loci    = n_loci),
file = file.path(outdir, paste0("simulation_output_", timestamp, ".rds")))
file.copy(logfile, file.path(outdir, paste0("simulation_progress_", timestamp, ".txt")))
# Load the saved RDS
sim_data <- readRDS("output/simulation_output_20250509_172815.rds")
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
# Load the saved RDS
sim_data <- readRDS("output/simulation_output_20250509_172815.rds")
# Extract everything
all_df = sim_data$all_df
agg_df = sim_data$agg_df
n_per_pop = sim_data$n_per_pop
n_gens = sim_data$n_gens
n_reps = sim_data$n_reps
h_vals = sim_data$h_vals
m_AB_vals = sim_data$m_AB_vals
m_BA_val  = sim_data$m_BA_val
env_A  = sim_data$env_A
env_B  = sim_data$env_B
env_sd = sim_data$env_sd
n_loci = sim_data$n_loci
# sim vs. theory
RMSE_mat = matrix(NA_real_, nrow = length(h_vals), ncol = length(m_AB_vals), dimnames = list(h_vals, m_AB_vals))
R2_mat   = RMSE_mat                 # same dimensions & dimnames
rmse     = function(obs, pred) sqrt(mean((obs - pred)^2, na.rm = TRUE))
## Loop and fill matrices
for (i in seq_along(h_vals)) {
h <- h_vals[i]
for (j in seq_along(m_AB_vals)) {
m <- m_AB_vals[j]
## analytic prediction
full_pred = Theory_full(h, m, env_A, env_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C=1)
pred_vec  = full_pred$Mean_E        # predicted mean for pop A
## corresponding simulation series for pop A
sim_subset <- agg_df[agg_df$h_epi == h & agg_df$m_AB == m, ]
sim_vec <- sim_subset$epi_A.mean[order(sim_subset$Generation)]
## goodness-of-fit
RMSE_mat[i, j] <- rmse(sim_vec, pred_vec)
}
}
cat("Root-Mean-Square Error (rows = h, cols = m):\n")
print(round(RMSE_mat, 4))             # four decimals
# Pick the combinations to display
h_vals_comp <- h_vals                     # c(0.01, 0.25, 0.75) for theory
m_vals_comp <- m_AB_vals
#Trait-mean trajectories with 95 % CI
par(mfrow = c(length(h_vals_comp), length(m_vals_comp)),mar   = c(4, 4, 2, 1))
for (h in h_vals_comp) {
for (m_val in m_vals_comp) {
df <- agg_df %>%
dplyr::filter(h_epi == h, m_AB == m_val) %>%  # m_AB, not m
dplyr::arrange(Generation) %>%
tidyr::drop_na()
plot(df$Generation, df$epi_A.mean, type = "n",
ylim = c(0, 1), xlab = "Generation",
ylab = "Trait value",
main = sprintf("h = %.2f, m = %.3f", h, m_val))
if (nrow(df) > 1) {
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_A.upr, rev(df$epi_A.lwr)), col = rgb(0, 0, 1, 0.2), border = NA)
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_B.upr, rev(df$epi_B.lwr)), col = rgb(1, 0, 0, 0.2), border = NA)
lines(df$Generation, df$epi_A.mean, col = "blue",  lwd = 2)
lines(df$Generation, df$epi_B.mean, col = "red",   lwd = 2)
}
legend("topright", legend = c("Pop A", "Pop B"), col    = c("blue", "red"), lwd = 2, cex = 0.8)
}
}
# epi-FST vs gen-FST trajectories
par(mfrow = c(length(h_vals_comp), length(m_vals_comp)), mar   = c(4, 4, 2, 1))
for (h in h_vals_comp) {
for (m_val in m_vals_comp) {
df <- agg_df %>%
dplyr::filter(h_epi == h, m_AB == m_val) %>%
dplyr::arrange(Generation) %>%
tidyr::drop_na()
plot(df$Generation, df$epi_FST.mean, type = "n", ylim = c(0, 1), xlab = "Generation", ylab = "FST", main = sprintf("h = %.2f, m = %.3f", h, m_val))
if (nrow(df) > 1) {
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_FST.upr, rev(df$epi_FST.lwr)), col = rgb(0, 0.5, 0, 0.2), border = NA)
polygon(c(df$Generation, rev(df$Generation)), c(df$gen_FST.upr, rev(df$gen_FST.lwr)), col = rgb(0.5, 0, 0.5, 0.2), border = NA)
lines(df$Generation, df$epi_FST.mean, col = "darkgreen", lwd = 2)
lines(df$Generation, df$gen_FST.mean, col = "purple",    lwd = 2, lty = 2)
}
legend("topright", legend = c("epi-FST", "gen-FST"), col    = c("darkgreen", "purple"), lty    = c(1, 2), lwd = 2, cex = 0.8)
}
}
par(mfrow = c(1, 1))
final_gen <- max(all_df$Generation)
heatmap_df <- all_df %>%
dplyr::filter(Generation == final_gen) %>%
dplyr::group_by(h_epi, m_AB, rep) %>%
dplyr::summarise(epi_FST = mean(epi_FST, na.rm = TRUE),
gen_FST = mean(gen_FST, na.rm = TRUE),
.groups = "drop") %>%
dplyr::group_by(h_epi, m_AB) %>%
dplyr::summarise(diff_FST = mean(epi_FST - gen_FST, na.rm = TRUE),
.groups = "drop")
z_mat <- with(heatmap_df, tapply(diff_FST, list(h_epi, m_AB), mean))
filled.contour(x = as.numeric(colnames(z_mat)), y = as.numeric(rownames(z_mat)), z = t(z_mat),
color.palette = colorRampPalette(c("dodgerblue2", "goldenrod1", "firebrick2")),
xlab = "Migration rate (m_AB)", ylab = "Epigenetic heritability (h_epi)", main = "Mean (epi-FST – gen-FST) at final generation")
matrix(rbinom(n_per_pop * n_loci * 2, 1, env_A), ncol = 2 * n_loci)
rbinom(n_per_pop * n_loci * 2, 1, env_A)
?rbinom
?rep
rep(x=1, times=(n_per_pop * n_loci * 2))
# Initialize population with SNP genotypes
geno_A = matrix(rep(x=1, times=(n_per_pop * n_loci * 2)), ncol = 2 * n_loci) #rbinom(n_per_pop * n_loci * 2, 1, env_A)
geno_B = matrix(rep(x=0, times=(n_per_pop * n_loci * 2)), ncol = 2 * n_loci) #rbinom(n_per_pop * n_loci * 2, 1, env_B)
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#Parameters
set.seed(2112)
n_per_pop = 1000                # Match theory n_pop=100
n_gens    = 50                  # Match theory t_max=250
n_reps    = 100
h_vals    = c(0.01, 0.5, 0.75, 0.9, 1)   # Match theory compare_h_vals=c(0.5, 0.75, 0.9)
m_AB_vals = c(0.01, 0.1, 0.2)   # Match theory compare_m_vals=c(0.01, 0.1)
m_BA_val  = 0                   # Allow option for migration to be asymmetric
env_A     = 0.5                 # Match theory 0.5
env_B     = 1                   # Match theory 1
env_sd    = 0.02                # Match theory environmental noise 0.02
start_E_A = 0.2                 # Match theory 0.2
start_E_B = 1                   # Match theory 1
noise_sd  = 0.01                # No epi noise beyond env_sd=0
n_loci    = 50
selection = 0                   # No selection=0
# Create progress log file
logfile <- "simulation_progress.txt"
write("Starting simulations...\n", file = logfile)
#Run replicates
results_list <- list()
for (h in h_vals) {
for (m in m_AB_vals) {
m_BA_val <- m                   # symmetric migration
reps <- replicate(n_reps, Simulate(h, m, m_BA_val, selection, env_A, env_B, env_sd, noise_sd, start_E_A, start_E_B), simplify = FALSE)
reps_df <- do.call(rbind, lapply(seq_along(reps), \(i) cbind(reps[[i]], rep = i)))
reps_df$h_epi <- h
reps_df$m_AB  <- m
reps_df$m_BA  <- m_BA_val
results_list[[paste(h, m, m_BA_val, sep = "_")]] <- reps_df
cat(sprintf("Finished h = %.2f, m_AB = %.2f, m_BA = %.2f at %s\n",  h, m, m_BA_val, format(Sys.time(), "%Y-%m-%d %H:%M:%S")), file = logfile, append = TRUE)
}
}
# aggregate output into manageble dataframe
all_df <- do.call(rbind, results_list)
agg_df <- all_df %>%
group_by(Generation, h_epi, m_AB) %>%
summarise(
epi_A.mean  = mean(epi_mean_A, na.rm = TRUE),
epi_A.lwr   = quantile(epi_mean_A, .025, na.rm = TRUE),
epi_A.upr   = quantile(epi_mean_A, .975, na.rm = TRUE),
epi_B.mean  = mean(epi_mean_B, na.rm = TRUE),
epi_B.lwr   = quantile(epi_mean_B, .025, na.rm = TRUE),
epi_B.upr   = quantile(epi_mean_B, .975, na.rm = TRUE),
epi_FST.mean = mean(epi_FST, na.rm = TRUE),
epi_FST.lwr  = quantile(epi_FST, .025, na.rm = TRUE),
epi_FST.upr  = quantile(epi_FST, .975, na.rm = TRUE),
gen_FST.mean = mean(gen_FST, na.rm = TRUE),
gen_FST.lwr  = quantile(gen_FST, .025, na.rm = TRUE),
gen_FST.upr  = quantile(gen_FST, .975, na.rm = TRUE),
.groups = "drop"
)
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
saveRDS(list(all_df   = all_df,
agg_df   = agg_df,
n_per_pop = n_per_pop,
n_gens    = n_gens,
n_reps    = n_reps,
h_vals    = h_vals,
m_AB_vals = m_AB_vals,
m_BA_val  = m_BA_val,
env_A     = env_A,
env_B     = env_B,
env_sd    = env_sd,
noise_sd  = noise_sd,
n_loci    = n_loci),
file = file.path(outdir, paste0("simulation_output_", timestamp, ".rds")))
file.copy(logfile, file.path(outdir, paste0("simulation_output_", timestamp, ".txt")))
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
# Load the saved RDS
sim_data <- readRDS("output/simulation_output_20250510_173051.rds")
# Extract everything
all_df = sim_data$all_df
agg_df = sim_data$agg_df
n_per_pop = sim_data$n_per_pop
n_gens = sim_data$n_gens
n_reps = sim_data$n_reps
h_vals = sim_data$h_vals
m_AB_vals = sim_data$m_AB_vals
m_BA_val  = sim_data$m_BA_val
env_A  = sim_data$env_A
env_B  = sim_data$env_B
env_sd = sim_data$env_sd
n_loci = sim_data$n_loci
# sim vs. theory
RMSE_mat = matrix(NA_real_, nrow = length(h_vals), ncol = length(m_AB_vals), dimnames = list(h_vals, m_AB_vals))
R2_mat   = RMSE_mat                 # same dimensions & dimnames
rmse     = function(obs, pred) sqrt(mean((obs - pred)^2, na.rm = TRUE))
## Loop and fill matrices
for (i in seq_along(h_vals)) {
h <- h_vals[i]
for (j in seq_along(m_AB_vals)) {
m <- m_AB_vals[j]
## analytic prediction
full_pred = Theory_full(h, m, env_A, env_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C=1)
pred_vec  = full_pred$Mean_E        # predicted mean for pop A
## corresponding simulation series for pop A
sim_subset <- agg_df[agg_df$h_epi == h & agg_df$m_AB == m, ]
sim_vec <- sim_subset$epi_A.mean[order(sim_subset$Generation)]
## goodness-of-fit
RMSE_mat[i, j] <- rmse(sim_vec, pred_vec)
}
}
cat("Root-Mean-Square Error (rows = h, cols = m):\n")
print(round(RMSE_mat, 4))             # four decimals
# Pick the combinations to display
h_vals_comp <- h_vals                     # c(0.01, 0.25, 0.75) for theory
m_vals_comp <- m_AB_vals
#Trait-mean trajectories with 95 % CI
par(mfrow = c(length(h_vals_comp), length(m_vals_comp)),mar   = c(4, 4, 2, 1))
for (h in h_vals_comp) {
for (m_val in m_vals_comp) {
df <- agg_df %>%
dplyr::filter(h_epi == h, m_AB == m_val) %>%  # m_AB, not m
dplyr::arrange(Generation) %>%
tidyr::drop_na()
plot(df$Generation, df$epi_A.mean, type = "n",
ylim = c(0, 1), xlab = "Generation",
ylab = "Trait value",
main = sprintf("h = %.2f, m = %.3f", h, m_val))
if (nrow(df) > 1) {
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_A.upr, rev(df$epi_A.lwr)), col = rgb(0, 0, 1, 0.2), border = NA)
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_B.upr, rev(df$epi_B.lwr)), col = rgb(1, 0, 0, 0.2), border = NA)
lines(df$Generation, df$epi_A.mean, col = "blue",  lwd = 2)
lines(df$Generation, df$epi_B.mean, col = "red",   lwd = 2)
}
legend("topright", legend = c("Pop A", "Pop B"), col    = c("blue", "red"), lwd = 2, cex = 0.8)
}
}
# epi-FST vs gen-FST trajectories
par(mfrow = c(length(h_vals_comp), length(m_vals_comp)), mar   = c(4, 4, 2, 1))
for (h in h_vals_comp) {
for (m_val in m_vals_comp) {
df <- agg_df %>%
dplyr::filter(h_epi == h, m_AB == m_val) %>%
dplyr::arrange(Generation) %>%
tidyr::drop_na()
plot(df$Generation, df$epi_FST.mean, type = "n", ylim = c(0, 1), xlab = "Generation", ylab = "FST", main = sprintf("h = %.2f, m = %.3f", h, m_val))
if (nrow(df) > 1) {
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_FST.upr, rev(df$epi_FST.lwr)), col = rgb(0, 0.5, 0, 0.2), border = NA)
polygon(c(df$Generation, rev(df$Generation)), c(df$gen_FST.upr, rev(df$gen_FST.lwr)), col = rgb(0.5, 0, 0.5, 0.2), border = NA)
lines(df$Generation, df$epi_FST.mean, col = "darkgreen", lwd = 2)
lines(df$Generation, df$gen_FST.mean, col = "purple",    lwd = 2, lty = 2)
}
legend("topright", legend = c("epi-FST", "gen-FST"), col    = c("darkgreen", "purple"), lty    = c(1, 2), lwd = 2, cex = 0.8)
}
}
for (h in h_vals_comp) {
for (m_val in m_vals_comp) {
df <- agg_df %>%
dplyr::filter(h_epi == h, m_AB == m_val) %>%
dplyr::arrange(Generation) %>%
tidyr::drop_na()
plot(df$Generation, df$epi_FST.mean, type = "n", ylim = c(0, 1), xlab = "Generation", ylab = "FST", main = sprintf("h = %.2f, m = %.3f", h, m_val))
if (nrow(df) > 1) {
polygon(c(df$Generation, rev(df$Generation)), c(df$epi_FST.upr, rev(df$epi_FST.lwr)), col = rgb(0, 0.5, 0, 0.2), border = NA)
polygon(c(df$Generation, rev(df$Generation)), c(df$gen_FST.upr, rev(df$gen_FST.lwr)), col = rgb(0.5, 0, 0.5, 0.2), border = NA)
lines(df$Generation, df$epi_FST.mean, col = "darkgreen", lwd = 2)
lines(df$Generation, df$gen_FST.mean, col = "purple",    lwd = 2, lty = 2)
}
#legend("topright", legend = c("epi-FST", "gen-FST"), col    = c("darkgreen", "purple"), lty    = c(1, 2), lwd = 2, cex = 0.8)
}
}
final_gen <- max(all_df$Generation)
heatmap_df <- all_df %>%
dplyr::filter(Generation == final_gen) %>%
dplyr::group_by(h_epi, m_AB, rep) %>%
dplyr::summarise(epi_FST = mean(epi_FST, na.rm = TRUE),
gen_FST = mean(gen_FST, na.rm = TRUE),
.groups = "drop") %>%
dplyr::group_by(h_epi, m_AB) %>%
dplyr::summarise(diff_FST = mean(epi_FST - gen_FST, na.rm = TRUE),
.groups = "drop")
z_mat <- with(heatmap_df, tapply(diff_FST, list(h_epi, m_AB), mean))
filled.contour(x = as.numeric(colnames(z_mat)), y = as.numeric(rownames(z_mat)), z = t(z_mat),
color.palette = colorRampPalette(c("dodgerblue2", "goldenrod1", "firebrick2")),
xlab = "Migration rate (m_AB)", ylab = "Epigenetic heritability (h_epi)", main = "Mean (epi-FST – gen-FST) at final generation")
# Plot simulation + theory side-by-side
# Choose combos to show (or leave as full vectors)
h_show <- h_vals          # e.g. c(0.01, 0.25, 0.75)
m_show <- m_AB_vals       # e.g. c(0.01, 0.20, 0.50)
par(mfrow = c(length(h_show), length(m_show)),
mar = c(4, 4, 2, 1))                           # grid of panels
for (h in h_show) {
for (m in m_show) {
## --- subset simulation output ---
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next  # safety
## --- theory prediction for same combo ---
start_EP_A <- sim_df$epi_A.mean[1]             # initial mean epi in pop A
start_EP_B <- sim_df$epi_B.mean[1]             # initial mean epi in pop B
full_pred <- Theory_full(h, m,
start_EP_A, start_EP_B,
env_A, env_B,
env_sd, n_per_pop,
n_gens, drift_C = 1)$Mean_E
## --- plot blank frame then add layers ---
plot(sim_df$Generation, sim_df$epi_A.mean,
type = "n", ylim = c(0, 1),
xlab = "Generation", ylab = "Epigenetic mean (pop A)",
main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
## 95 % CI ribbon for simulation
polygon(c(sim_df$Generation, rev(sim_df$Generation)),
c(sim_df$epi_A.upr,  rev(sim_df$epi_A.lwr)),
col = adjustcolor("steelblue", 0.3), border = NA)
## simulation mean
lines(sim_df$Generation, sim_df$epi_A.mean,
col = "steelblue", lwd = 2)
## theory curve
lines(sim_df$Generation, full_pred,
col = "firebrick", lwd = 2, lty = 2)
legend("bottomright",
legend = c("Simulation mean", "95 % CI", "Theory (full)"),
lwd = c(2, NA, 2), lty = c(1, NA, 2),
pch = c(NA, 15, NA),
pt.cex = c(NA, 2, NA),
col = c("steelblue", adjustcolor("steelblue", 0.3), "firebrick"),
bty = "n", cex = 0.8)
}
}
sim_df$epi_B.mean[1]
sim_df$epi_A.mean[1]
