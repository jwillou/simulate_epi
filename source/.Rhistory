drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, var_local[1])#drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, var_local[1])#drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
mean_local[1]   = start_E_local
mean_migrant[1] = start_E_migrant
var_local[1] <- 0.02
for (t in 2:t_max) {
# Migration step
E_after_migration_local   = (1 - m) * mean_local[t-1] + m * mean_migrant[t-1]
E_after_migration_migrant = (1 - m) * mean_migrant[t-1] + m * mean_local[t-1]
# Deterministic update
deterministic_local   = h_epi * E_after_migration_local   + (1 - h_epi) * env_local
deterministic_migrant = h_epi * E_after_migration_migrant + (1 - h_epi) * env_migrant
# Drift based on trait variance (QTL-style sampling error)
drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, var_local[1])#drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, var_local[1])#drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
var_local
hist(rnorm(1, 0, var_local[1]))
?rnorm
drift_C
Theory_full <- function(h_epi, m, start_E_local, start_E_migrant, env_local, env_migrant, env_sd, n_pop, t_max, drift_C = 1) {
mean_local   = numeric(t_max)
mean_migrant = numeric(t_max)
var_local    = numeric(t_max)
mean_local[1]   = start_E_local
mean_migrant[1] = start_E_migrant
var_local[1]    = 0.02
for (t in 2:t_max) {
# Migration step
E_after_migration_local   = (1 - m) * mean_local[t-1] + m * mean_migrant[t-1]
E_after_migration_migrant = (1 - m) * mean_migrant[t-1] + m * mean_local[t-1]
# Deterministic update
deterministic_local   = h_epi * E_after_migration_local   + (1 - h_epi) * env_local
deterministic_migrant = h_epi * E_after_migration_migrant + (1 - h_epi) * env_migrant
# Drift based on trait variance (QTL-style sampling error)
drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
return(data.frame(Generation = 1:t_max, Mean_E = mean_local, Var_E = var_local))
}
mean_local[1]   = start_E_local
mean_migrant[1] = start_E_migrant
var_local[1]    = 0.02
for (t in 2:t_max) {
# Migration step
E_after_migration_local   = (1 - m) * mean_local[t-1] + m * mean_migrant[t-1]
E_after_migration_migrant = (1 - m) * mean_migrant[t-1] + m * mean_local[t-1]
# Deterministic update
deterministic_local   = h_epi * E_after_migration_local   + (1 - h_epi) * env_local
deterministic_migrant = h_epi * E_after_migration_migrant + (1 - h_epi) * env_migrant
# Drift based on trait variance (QTL-style sampling error)
drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
var_local
sqrt(drift_C * var_local[t-1] / n_pop)
sqrt(drift_C * var_local[t-1] / (2*n_pop))
0.0003651484>0.0002581989
drift_C
drift_C=4
mean_local[1]   = start_E_local
mean_migrant[1] = start_E_migrant
var_local[1]    = 0.02
for (t in 2:t_max) {
# Migration step
E_after_migration_local   = (1 - m) * mean_local[t-1] + m * mean_migrant[t-1]
E_after_migration_migrant = (1 - m) * mean_migrant[t-1] + m * mean_local[t-1]
# Deterministic update
deterministic_local   = h_epi * E_after_migration_local   + (1 - h_epi) * env_local
deterministic_migrant = h_epi * E_after_migration_migrant + (1 - h_epi) * env_migrant
# Drift based on trait variance (QTL-style sampling error)
drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
var_local
Theory_full <- function(h_epi, m, start_E_local, start_E_migrant, env_local, env_migrant, env_sd, n_pop, t_max, drift_C = 1) {
mean_local   = numeric(t_max)
mean_migrant = numeric(t_max)
var_local    = numeric(t_max)
mean_local[1]   = start_E_local
mean_migrant[1] = start_E_migrant
var_local[1]    = 0.02
for (t in 2:t_max) {
# Migration step
E_after_migration_local   = (1 - m) * mean_local[t-1] + m * mean_migrant[t-1]
E_after_migration_migrant = (1 - m) * mean_migrant[t-1] + m * mean_local[t-1]
# Deterministic update
deterministic_local   = h_epi * E_after_migration_local   + (1 - h_epi) * env_local
deterministic_migrant = h_epi * E_after_migration_migrant + (1 - h_epi) * env_migrant
# Drift based on trait variance (QTL-style sampling error)
drift_sd_local   = sqrt(drift_C * var_local[t-1] / n_pop)
drift_sd_migrant = sqrt(drift_C * var_local[t-1] / n_pop)
mean_local[t]   = deterministic_local   + rnorm(1, 0, drift_sd_local)
mean_migrant[t] = deterministic_migrant + rnorm(1, 0, drift_sd_migrant)
# Update variance (from Lynch & Walsh)
var_local[t] = (h_epi^2) * var_local[t-1] + (1 - h_epi)^2 * env_sd^2
}
return(data.frame(Generation = 1:t_max, Mean_E = mean_local, Var_E = var_local))
}
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=4)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
# Add CI shading for full model
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
full_pred
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * SE
full_pred$CI_lower = full_pred$Mean_E - 1.96 * SE
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * SE
full_pred$CI_upper = full_pred$Mean_E + 1.96 * full_pred$SE
full_pred$CI_lower = full_pred$Mean_E - 1.96 * full_pred$SE
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
full_pred
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * full_pred$SE
full_pred$CI_lower = full_pred$Mean_E - 1.96 * full_pred$SE
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
full_pred
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 10 * full_pred$SE
full_pred$CI_lower = full_pred$Mean_E - 10 * full_pred$SE
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
full_pred
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * sqrt(full_pred$Var_E)
full_pred$CI_lower = full_pred$Mean_E - 1.96 * sqrt(full_pred$Var_E)
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
for (gen in 1:generations) {
methylated <- rowSums(matrix(population %in% c("A_M", "a_M"), nrow = N))
methylation_percent <- methylated / 2
mean_epi[gen] <- mean(methylation_percent)
var_epi[gen]  <- var(methylation_percent)
all_alleles <- c(population[,1], population[,2])
freqs[gen, ] <- table(factor(all_alleles, levels = epialleles)) / (2 * N)
fitness_vals <- apply(population, 1, function(ind) get_fitness(ind[1], ind[2]))
fitness_probs <- fitness_vals / sum(fitness_vals)
parent_indices <- sample(1:N, size = N, replace = TRUE, prob = fitness_probs)
offspring <- matrix(NA, nrow = N, ncol = 2)
for (i in 1:N) {
p1 <- population[parent_indices[i], ]
p2 <- population[sample(1:N, 1), ]
g1 <- apply_mutation(p1[sample(1:2, 1)], mu, rho)
g2 <- apply_mutation(p2[sample(1:2, 1)], mu, rho)
offspring[i, ] <- c(g1, g2)
}
population <- offspring
}
# Webster & Phillips (2024) - Four epiallele model
# Tracks A_M, A_U, a_M, a_U over generations with mutation and epimutation
Theory_WP <- function(
N = 100,
generations = 50,
mu = 1e-5,
rho = 1e-3,
initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40)
) {
var_epi <- numeric(generations)  # to store per-generation individual variance
# Internal mutation helper
apply_mutation <- function(allele, mu, rho) {
parts <- strsplit(allele, "_")[[1]]
base <- parts[1]
epi <- parts[2]
if (runif(1) < mu) {
base <- ifelse(base == "A", "a", "A")
}
if (runif(1) < rho) {
epi <- ifelse(epi == "M", "U", "M")
}
paste(base, epi, sep = "_")
}
`%||%` <- function(x, y) if (!is.null(x)) x else y  # default operator
epialleles <- c("A_M", "A_U", "a_M", "a_U")
get_fitness <- function(geno1, geno2) {
geno_pair <- paste(sort(c(geno1, geno2)), collapse = "/")
fitness_map <- list(
"A_M/A_M" = 1.00,
"A_M/A_U" = 0.975,
"A_U/A_U" = 0.95,
"A_M/a_M" = 0.9,
"A_U/a_M" = 0.875,
"A_U/a_U" = 0.85,
"a_M/a_M" = 0.8,
"a_M/a_U" = 0.775,
"a_U/a_U" = 0.70
)
return(fitness_map[[geno_pair]] %||% 0.75)
}
init_pool <- sample(names(initial_freqs), 2 * N, replace = TRUE, prob = initial_freqs)
population <- matrix(init_pool, nrow = N, ncol = 2, byrow = TRUE)
mean_epi <- numeric(generations)
freqs <- matrix(0, nrow = generations, ncol = 4)
colnames(freqs) <- epialleles
for (gen in 1:generations) {
methylated <- rowSums(matrix(population %in% c("A_M", "a_M"), nrow = N))
methylation_percent <- methylated / 2
mean_epi[gen] <- mean(methylation_percent)
var_epi[gen]  <- var(methylation_percent)
all_alleles <- c(population[,1], population[,2])
freqs[gen, ] <- table(factor(all_alleles, levels = epialleles)) / (2 * N)
fitness_vals <- apply(population, 1, function(ind) get_fitness(ind[1], ind[2]))
fitness_probs <- fitness_vals / sum(fitness_vals)
parent_indices <- sample(1:N, size = N, replace = TRUE, prob = fitness_probs)
offspring <- matrix(NA, nrow = N, ncol = 2)
for (i in 1:N) {
p1 <- population[parent_indices[i], ]
p2 <- population[sample(1:N, 1), ]
g1 <- apply_mutation(p1[sample(1:2, 1)], mu, rho)
g2 <- apply_mutation(p2[sample(1:2, 1)], mu, rho)
offspring[i, ] <- c(g1, g2)
}
population <- offspring
}
result <- as.data.frame(freqs)
result$Generation <- 1:generations
result$mean_epi <- mean_epi
result$var_epi <- var_epi
return(result)
}
# Plot mean epigenetic value
#plot(wp_exact$Generation, wp_exact$mean_epi, type = "l", col = "black", lwd = 2,
#     ylab = "Mean Epigenetic Value", xlab = "Generation", ylim = c(0, 1),
#     main = "W&P Full Simulation (Exact Diploid)")
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * sqrt(full_pred$Var_E)
full_pred$CI_lower = full_pred$Mean_E - 1.96 * sqrt(full_pred$Var_E)
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
WP_pred
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
polygon(c(WP_pred$Generation, rev(full_pred$Generation)), c(WP_pred$CI_upper, rev(WP_pred$CI_lower)), col = adjustcolor("navy", alpha.f = 0.2), border = NA)
head(WP_pred)
WP_pred$SE = sqrt(WP_pred$var_epi / n_pop)
WP_pred$CI_upper = WP_pred$mean_epi + 1.96 * sqrt(WP_pred$var_epi)
WP_pred$CI_lower = WP_pred$mean_epi - 1.96 * sqrt(WP_pred$var_epi)
head(WP_pred)
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
polygon(c(WP_pred$Generation, rev(full_pred$Generation)), c(WP_pred$CI_upper, rev(WP_pred$CI_lower)), col = adjustcolor("navy", alpha.f = 0.2), border = NA)
sqrt(WP_pred$var_epi)
WP_pred$var_epi
WP_pred$CI_upper = WP_pred$mean_epi + 1.96 * WP_pred$var_epi
head(WP_pred)
WP_pred$CI_lower = WP_pred$mean_epi - 1.96 * WP_pred$var_epi
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
polygon(c(WP_pred$Generation, rev(full_pred$Generation)), c(WP_pred$CI_upper, rev(WP_pred$CI_lower)), col = adjustcolor("navy", alpha.f = 0.2), border = NA)
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
#CIs
full_pred$SE = sqrt(full_pred$Var_E / n_pop)
full_pred$CI_upper = full_pred$Mean_E + 1.96 * full_pred$Var_E
full_pred$CI_lower = full_pred$Mean_E - 1.96 * full_pred$Var_E
WP_pred$SE = sqrt(WP_pred$var_epi / n_pop)
WP_pred$CI_upper = WP_pred$mean_epi + 1.96 * WP_pred$var_epi
WP_pred$CI_lower = WP_pred$mean_epi - 1.96 * WP_pred$var_epi
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
polygon(c(full_pred$Generation, rev(full_pred$Generation)), c(full_pred$CI_upper, rev(full_pred$CI_lower)), col = adjustcolor("forestgreen", alpha.f = 0.2), border = NA)
polygon(c(WP_pred$Generation, rev(full_pred$Generation)), c(WP_pred$CI_upper, rev(WP_pred$CI_lower)), col = adjustcolor("navy", alpha.f = 0.2), border = NA)
head(full_pred)
#heritability and migration values to compare
compare_h_vals = c(0.5, 0.75)
compare_m_vals = c(0.01, 0.1)
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0,1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0.2,0.6), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
# legend("bottomright",
#        legend = c("Simple", "Migration", "Full (w/ Drift)", "W&P (Epiallele)"),
#        col = c("darkorange", "forestgreen", "red", "black"),
#        lty = c(3, 2, 1, 4), lwd = 2, cex = 0.8)
}
}
#heritability and migration values to compare
compare_h_vals = c(0.5, 0.75, 0.9)
compare_m_vals = c(0.01, 0.1)
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0.2,0.6), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
}
}
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0.2,0.7), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C=1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val,  initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
# Plot
plot(-100,-100, type = "l", xlim=c(0,t_max), ylim=c(0.2,0.7), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 2)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 2)
}
}
