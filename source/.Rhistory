lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
#lines(1:n_gens, adj_migration_pred, col = "black", lty = 6, lwd = 2)
lines(1:n_gens, accum_pred, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
Theory_accumulative_migration <- function(h_epi, m, start_E_A, env_B, env_A, env_sd, n_pop, t_max, drift_C = 1) {
mu_A <- numeric(t_max)  # mean trait in population A
q_B  <- numeric(t_max)  # proportion of ancestry from B
var_A <- numeric(t_max) # variance in trait values for A
# Initialize
mu_A[1] <- start_E_A
q_B[1]  <- 0
var_A[1] <- env_sd^2  # assume equilibrium env-induced variance at t=1
for (t in 2:t_max) {
# Update B ancestry proportion with heritability retention
q_B[t] <- (1 - m) * (h_epi * q_B[t - 1]) + m
# Inherited component based on migrant ancestry
inherited_component <- (1 - q_B[t]) * mu_A[t - 1] + q_B[t] * env_B
# Drift variance term (Lynch & Walsh-style)
drift_sd <- sqrt(drift_C * var_A[t - 1] / n_pop)
# Update trait mean with stochastic sampling
mu_A[t] <- h_epi * inherited_component + (1 - h_epi) * env_A + rnorm(1, mean = 0, sd = drift_sd)
# Update variance recursively
var_A[t] <- (h_epi^2) * var_A[t - 1] + (1 - h_epi)^2 * env_sd^2
}
return(data.frame(Generation = 1:t_max, Mean_E = mu_A, Var_E = var_A, qB = q_B))
}
for (h in h_show) {
for (m in cm_show) {
# --- Subset simulation data ---
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
# --- Starting trait values for theory ---
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# --- Theory predictions ---
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 1)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
adj_migration_pred <- Theory_adjusted_migration(h, m, start_E_A, env_B, env_A, n_gens)
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens )
# --- Plot setup ---
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),
xlab = "Generation", ylab = "Epigenetic mean (pop A)",
main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# --- Simulation ribbon and line ---
polygon(c(sim_df$Generation, rev(sim_df$Generation)),
c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)),
col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# --- Overlay theory curves ---
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
#lines(1:n_gens, adj_migration_pred, col = "black", lty = 6, lwd = 2)
lines(1:n_gens, accum_pred, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
accum_pred
WP_pred
# --- Plot simulation + all theory predictions ---
par(mfrow = c(length(h_show), length(cm_show)), mar = c(4, 4, 2, 1))
for (h in h_show) {
for (m in cm_show) {
# --- Subset simulation data ---
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
# --- Starting trait values for theory ---
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# --- Theory predictions ---
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 1)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
adj_migration_pred <- Theory_adjusted_migration(h, m, start_E_A, env_B, env_A, n_gens)
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens )
# --- Plot setup ---
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),
xlab = "Generation", ylab = "Epigenetic mean (pop A)",
main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# --- Simulation ribbon and line ---
polygon(c(sim_df$Generation, rev(sim_df$Generation)),
c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)),
col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# --- Overlay theory curves ---
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
#lines(1:n_gens, adj_migration_pred, col = "black", lty = 6, lwd = 2)
lines(1:n_gens, accum_pred$Mean_E, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
Theory_accumulative_migration <- function(h_epi, m, start_E_A, env_B, env_A, env_sd, n_pop, t_max, drift_C = 2) {
mu_A <- numeric(t_max)  # mean trait in population A
q_B  <- numeric(t_max)  # proportion of ancestry from B
var_A <- numeric(t_max) # variance in trait values for A
# Initialize
mu_A[1] <- start_E_A
q_B[1]  <- 0
var_A[1] <- env_sd^2  # assume equilibrium env-induced variance at t=1
for (t in 2:t_max) {
# Update B ancestry proportion with heritability retention
q_B[t] <- (1 - m) * (h_epi * q_B[t - 1]) + m
# Inherited component based on migrant ancestry
inherited_component <- (1 - q_B[t]) * mu_A[t - 1] + q_B[t] * env_B
# Drift variance term (Lynch & Walsh-style)
drift_sd <- sqrt(drift_C * var_A[t - 1] / n_pop)
# Update trait mean with stochastic sampling
mu_A[t] <- h_epi * inherited_component + (1 - h_epi) * env_A + rnorm(1, mean = 0, sd = drift_sd)
# Update variance recursively
var_A[t] <- (h_epi^2) * var_A[t - 1] + (1 - h_epi)^2 * env_sd^2
}
return(data.frame(Generation = 1:t_max, Mean_E = mu_A, Var_E = var_A, qB = q_B))
}
# Plot simulation + theory side-by-side
# Choose combos to show (or leave as full vectors)
h_show = 0.75#c(0.50, 0.75, 0.90) #h_vals
cm_show = 0.1#c(0.01, 0.1, 0.2) #m_AB_vals
# --- Plot simulation + all theory predictions ---
par(mfrow = c(length(h_show), length(cm_show)), mar = c(4, 4, 2, 1))
for (h in h_show) {
for (m in cm_show) {
# Subset simulation data
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
#  Starting trait values for theory
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# Theory predictions
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 1)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens )
# Plot setup
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),xlab = "Generation", ylab = "Epigenetic mean (pop A)", main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# Simulation
polygon(c(sim_df$Generation, rev(sim_df$Generation)),c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)), col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# Theory curves
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
lines(1:n_gens, accum_pred$Mean_E, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
Theory_accumulative_migration <- function(h_epi, m, start_E_A, env_B, env_A, env_sd, n_pop, t_max, drift_C) {
mu_A <- numeric(t_max)  # mean trait in population A
q_B  <- numeric(t_max)  # proportion of ancestry from B
var_A <- numeric(t_max) # variance in trait values for A
# Initialize
mu_A[1] <- start_E_A
q_B[1]  <- 0
var_A[1] <- env_sd^2  # assume equilibrium env-induced variance at t=1
for (t in 2:t_max) {
# Update B ancestry proportion with heritability retention
q_B[t] <- (1 - m) * (h_epi * q_B[t - 1]) + m
# Inherited component based on migrant ancestry
inherited_component <- (1 - q_B[t]) * mu_A[t - 1] + q_B[t] * env_B
# Drift variance term (Lynch & Walsh-style)
drift_sd <- sqrt(drift_C * var_A[t - 1] / n_pop)
# Update trait mean with stochastic sampling
mu_A[t] <- h_epi * inherited_component + (1 - h_epi) * env_A + rnorm(1, mean = 0, sd = drift_sd)
# Update variance recursively
var_A[t] <- (h_epi^2) * var_A[t - 1] + (1 - h_epi)^2 * env_sd^2
}
return(data.frame(Generation = 1:t_max, Mean_E = mu_A, Var_E = var_A, qB = q_B))
}
# --- Plot simulation + all theory predictions ---
par(mfrow = c(length(h_show), length(cm_show)), mar = c(4, 4, 2, 1))
for (h in h_show) {
for (m in cm_show) {
# Subset simulation data
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
#  Starting trait values for theory
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# Theory predictions
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 5)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens, drift_C = 5)
# Plot setup
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),xlab = "Generation", ylab = "Epigenetic mean (pop A)", main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# Simulation
polygon(c(sim_df$Generation, rev(sim_df$Generation)),c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)), col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# Theory curves
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
lines(1:n_gens, accum_pred$Mean_E, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
for (h in h_show) {
for (m in cm_show) {
# Subset simulation data
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
#  Starting trait values for theory
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# Theory predictions
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 10)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens, drift_C = 10)
# Plot setup
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),xlab = "Generation", ylab = "Epigenetic mean (pop A)", main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# Simulation
polygon(c(sim_df$Generation, rev(sim_df$Generation)),c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)), col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# Theory curves
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 2, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 3, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 4, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 5, lwd = 1.5)  # WP model
lines(1:n_gens, accum_pred$Mean_E, col = "black", lty = 1, lwd = 2)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, NA, 2, 3, 4, 5), lwd = c(2, NA, 1.5, 1.5, 1.5, 1.5, 1),
pt.cex = c(NA, 2, NA, NA, NA, NA, NA), pch = c(NA, 15, NA, NA, NA, NA, NA),
bty = "n", cex = 0.75)
}
}
# --- Plot simulation + all theory predictions ---
par(mfrow = c(length(h_show), length(cm_show)), mar = c(4, 4, 2, 1))
for (h in h_show) {
for (m in cm_show) {
# Subset simulation data
sim_df <- subset(agg_df, h_epi == h & m_AB == m)
sim_df <- sim_df[order(sim_df$Generation), ]
if (nrow(sim_df) == 0L) next
#  Starting trait values for theory
start_E_A <- sim_df$epi_A.mean[1]
start_E_B <- sim_df$epi_B.mean[1]
# Theory predictions
simple_pred    <- Theory_simple(h, start_E_A, env_A, n_gens)
migration_pred <- Theory_migration(h, m, start_E_A, start_E_B, env_A, env_B, n_gens)
full_pred_df   <- Theory_full(h, m, start_E_A, start_E_B, env_A, env_B, env_sd, n_per_pop, n_gens, drift_C = 10)
full_pred      <- full_pred_df$Mean_E
WP_pred        <- Theory_WP(N = n_per_pop, generations = n_gens, mu = 1e-5, rho = 1 - h, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred <- Theory_accumulative_migration(h_epi = h, m = m, start_E_A = start_E_A, env_B = env_B, env_A = env_A, env_sd = env_sd, n_pop = n_per_pop, t_max = n_gens, drift_C = 10)
# Plot setup
plot(sim_df$Generation, sim_df$epi_A.mean, type = "n", ylim = c(0, 1),xlab = "Generation", ylab = "Epigenetic mean (pop A)", main = bquote(h[epi] == .(h) ~ ",  m" == .(m)))
# Simulation
polygon(c(sim_df$Generation, rev(sim_df$Generation)),c(sim_df$epi_A.upr, rev(sim_df$epi_A.lwr)), col = adjustcolor("steelblue", 0.3), border = NA)
lines(sim_df$Generation, sim_df$epi_A.mean, col = "steelblue", lwd = 2)
# Theory curves
lines(1:n_gens, simple_pred,    col = "firebrick2",   lty = 1, lwd = 1.5)  # simple
lines(1:n_gens, migration_pred, col = "darkorange",   lty = 1, lwd = 1.5)  # migration
lines(1:n_gens, full_pred,      col = "forestgreen",  lty = 1, lwd = 1.5)  # full w/ drift
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lty = 1, lwd = 1.5)  # WP model
lines(1:n_gens, accum_pred$Mean_E, col = "black", lty = 1, lwd = 1.5)
# --- Legend ---
legend("bottomright",
legend = c("Simulation mean", "95% CI",
"Theory: simple", "Theory: migration", "Theory: full", "Theory: WP", "Theory: accumulative"),
col = c("steelblue", adjustcolor("steelblue", 0.3),
"firebrick2", "darkorange", "forestgreen", "navy", "black"),
lty = c(1, 1, 1, 1, 1, 1), lwd = c(1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1),
bty = "n", cex = 0.75)
}
}
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory, "/output/", sep = "")                 # directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))    # source functions and set source directory
# parameter values
t_max  = 250
env_A  = 0.5
env_B  = 1
env_sd = 0.1
n_pop  = 100
drift_C = 1
drift_C = 10
# allow shifts
start_E_A = 0.2
start_E_B = 1
# heritability and migration values
compare_h_vals = c(0.50, 0.75, 0.90)
compare_m_vals = c(0.01, 0.1, 0.2)
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C = 1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred_df  = Theory_accumulative_migration(h_val, m_val, start_E_A, env_B, env_A, env_sd, n_pop, t_max, drift_C = 1)
# Plot setup
plot(-100, -100, type = "l", xlim = c(0, t_max), ylim = c(0.2, 0.7), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
# Theory curves
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 1)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 1)
lines(1:t_max, accum_pred_df$Mean_E, col = "black", lwd = 1, lty = 1)
}
}
# Plot setup
plot(-100, -100, type = "l", xlim = c(0, t_max), ylim = c(0.2, 1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
# Theory curves
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 1)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 1)
lines(1:t_max, accum_pred_df$Mean_E, col = "black", lwd = 1, lty = 1)
# run equations and plot
par(mfrow = c(length(compare_h_vals), length(compare_m_vals)), mar = c(4, 4, 2, 1))
for (h_val in compare_h_vals) {
for (m_val in compare_m_vals) {
simple_pred    = Theory_simple(h_val, start_E_A, env_A, t_max)
migration_pred = Theory_migration(h_val, m_val, start_E_A, start_E_B, env_A, env_B, t_max)
full_pred      = Theory_full(h_val, m_val, start_E_A, start_E_B, env_A, env_B, env_sd, n_pop, t_max, drift_C = 1)
WP_pred        = Theory_WP(N = n_pop, generations = t_max, mu = 1e-5, rho = 1 - h_val, initial_freqs = c(A_M = 0.10, A_U = 0.40, a_M = 0.10, a_U = 0.40))
accum_pred_df  = Theory_accumulative_migration(h_val, m_val, start_E_A, env_B, env_A, env_sd, n_pop, t_max, drift_C = 1)
# Plot setup
plot(-100, -100, type = "l", xlim = c(0, t_max), ylim = c(0.2, 1), xlab = "Generation", ylab = "Mean Epigenetic Value", main = paste("h =", h_val, ", m =", m_val))
# Theory curves
lines(WP_pred$Generation, WP_pred$mean_epi, col = "navy", lwd = 1, lty = 1)
lines(full_pred$Generation, full_pred$Mean_E, col = "forestgreen", lwd = 1, lty = 1)
lines(1:t_max, migration_pred, col = "darkorange", lwd = 1, lty = 1)
lines(1:t_max, simple_pred, col = "firebrick2", lwd = 1, lty = 1)
lines(1:t_max, accum_pred_df$Mean_E, col = "black", lwd = 1, lty = 1)
}
}
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#Parameters
set.seed(2112)
n_per_pop = 100                          # Match theory n_pop=100
n_gens    = 50                           # Match theory t_max=250
n_reps    = 100
h_vals    = c(0.01, 0.5, 0.75, 0.9, 1)   # Match theory compare_h_vals=c(0.5, 0.75, 0.9) 0.01, 0.5, 0.75, 0.9, 1
m_AB_vals = c(0.01, 0.1, 0.2)             # Match theory compare_m_vals=c(0.01, 0.1)  0.01, 0.1, 0.2
m_BA_val  = 0                   # Allow option for migration to be asymmetric
env_A     = 0.5                 # Match theory 0.5
env_B     = 1                   # Match theory 1
env_sd    = 0.1                 # Match theory environmental noise 0.02
start_E_A = 0.2                 # Match theory 0.2
start_E_B = 1                   # Match theory 1
noise_sd  = 0.01                # No epi noise beyond env_sd=0
n_loci    = 50
selection = 0.1                   # No selection=0
# Create progress log file
logfile <- "simulation_progress.txt"
write("Starting simulations...\n", file = logfile)
#Run replicates
results_list <- list()
for (h in h_vals) {
for (m in m_AB_vals) {
m_BA_val <- m                   # symmetric migration
reps <- replicate(n_reps, Simulate(h, m, m_BA_val, selection, env_A, env_B, env_sd, noise_sd, start_E_A, start_E_B), simplify = FALSE)
reps_df <- do.call(rbind, lapply(seq_along(reps), \(i) cbind(reps[[i]], rep = i)))
reps_df$h_epi <- h
reps_df$m_AB  <- m
reps_df$m_BA  <- m_BA_val
results_list[[paste(h, m, m_BA_val, sep = "_")]] <- reps_df
cat(sprintf("Finished h = %.2f, m_AB = %.2f, m_BA = %.2f at %s\n",  h, m, m_BA_val, format(Sys.time(), "%Y-%m-%d %H:%M:%S")), file = logfile, append = TRUE)
}
}
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
#setwd("/Users/jrw0107/Google Drive/My Drive/Willoughby lab/projects - active/epi migration/simulate_epi/")
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
#Parameters
set.seed(2112)
n_per_pop = 100                          # Match theory n_pop=100
n_gens    = 50                           # Match theory t_max=250
n_reps    = 100
h_vals    = c(0.01, 0.5, 0.75, 0.9, 1)   # Match theory compare_h_vals=c(0.5, 0.75, 0.9) 0.01, 0.5, 0.75, 0.9, 1
m_AB_vals = c(0.01, 0.1, 0.2)            # Match theory compare_m_vals=c(0.01, 0.1)  0.01, 0.1, 0.2
m_BA_val  = 0                            # Allow option for migration to be asymmetric
env_A     = 0.5                          # Match theory 0.5
env_B     = 1                            # Match theory 1
env_sd    = 0.1                          # Match theory environmental noise 0.02
start_E_A = 0.2                          # Match theory 0.2
start_E_B = 1                            # Match theory 1
noise_sd  = 0.01                         # No epi noise beyond env_sd=0
n_loci    = 50
selection = 0.1                          # No selection=0
# Create progress log file
logfile <- "simulation_progress.txt"
write("Starting simulations...\n", file = logfile)
#Run replicates
results_list <- list()
for (h in h_vals) {
for (m in m_AB_vals) {
m_BA_val <- m                   # symmetric migration
reps <- replicate(n_reps, Simulate(h, m, m_BA_val, selection, env_A, env_B, env_sd, noise_sd, start_E_A, start_E_B), simplify = FALSE)
reps_df <- do.call(rbind, lapply(seq_along(reps), \(i) cbind(reps[[i]], rep = i)))
reps_df$h_epi <- h
reps_df$m_AB  <- m
reps_df$m_BA  <- m_BA_val
results_list[[paste(h, m, m_BA_val, sep = "_")]] <- reps_df
cat(sprintf("Finished h = %.2f, m_AB = %.2f, m_BA = %.2f at %s\n",  h, m, m_BA_val, format(Sys.time(), "%Y-%m-%d %H:%M:%S")), file = logfile, append = TRUE)
}
}
# aggregate output into manageble dataframe
all_df <- do.call(rbind, results_list)
agg_df <- all_df %>%
group_by(Generation, h_epi, m_AB) %>%
summarise(
epi_A.mean  = mean(epi_mean_A, na.rm = TRUE),
epi_A.lwr   = quantile(epi_mean_A, .025, na.rm = TRUE),
epi_A.upr   = quantile(epi_mean_A, .975, na.rm = TRUE),
epi_B.mean  = mean(epi_mean_B, na.rm = TRUE),
epi_B.lwr   = quantile(epi_mean_B, .025, na.rm = TRUE),
epi_B.upr   = quantile(epi_mean_B, .975, na.rm = TRUE),
epi_FST.mean = mean(epi_FST, na.rm = TRUE),
epi_FST.lwr  = quantile(epi_FST, .025, na.rm = TRUE),
epi_FST.upr  = quantile(epi_FST, .975, na.rm = TRUE),
gen_FST.mean = mean(gen_FST, na.rm = TRUE),
gen_FST.lwr  = quantile(gen_FST, .025, na.rm = TRUE),
gen_FST.upr  = quantile(gen_FST, .975, na.rm = TRUE),
.groups = "drop"
)
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
saveRDS(list(all_df   = all_df,
agg_df   = agg_df,
n_per_pop = n_per_pop,
n_gens    = n_gens,
n_reps    = n_reps,
h_vals    = h_vals,
m_AB_vals = m_AB_vals,
m_BA_val  = m_BA_val,
env_A     = env_A,
env_B     = env_B,
env_sd    = env_sd,
noise_sd  = noise_sd,
n_loci    = n_loci),
file = file.path(outdir, paste0("simulation_output_", timestamp, ".rds")))
file.copy(logfile, file.path(outdir, paste0("simulation_output_", timestamp, ".txt")))
